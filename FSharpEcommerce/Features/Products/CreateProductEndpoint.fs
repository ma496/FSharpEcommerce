namespace FSharpEcommerce.Features.Products

open System
open System.Threading.Tasks
open System.Data
open FSharpEcommerce.Models
open FSharpEcommerce.Utils
open Microsoft.AspNetCore.Http
open Microsoft.AspNetCore.Authorization

module CreateProductModule =
    /// Define validators for product creation
    let validateCreateProductRequest (request: CreateProductRequest) =
        // Validate each field
        let nameResult =
            ValidationUtils.Validators.required "name" request.Name
            |> Result.bind (ValidationUtils.Validators.minLength "name" 3)
            |> Result.bind (ValidationUtils.Validators.maxLength "name" 100)

        let descriptionResult =
            ValidationUtils.Validators.required "description" request.Description
            |> Result.bind (ValidationUtils.Validators.minLength "description" 10)
            |> Result.bind (ValidationUtils.Validators.maxLength "description" 1000)

        let priceResult = ValidationUtils.Validators.minValue "price" 0M request.Price

        let stockQuantityResult =
            ValidationUtils.Validators.minValue "stockQuantity" 0 request.StockQuantity

        let categoryIdResult =
            ValidationUtils.Validators.minValue "categoryId" 1 request.CategoryId

        // Combine all validation results
        match nameResult, descriptionResult, priceResult, stockQuantityResult, categoryIdResult with
        | Ok name, Ok description, Ok price, Ok stockQuantity, Ok categoryId ->
            Ok
                { Name = name
                  Description = description
                  Price = price
                  StockQuantity = stockQuantity
                  CategoryId = categoryId }
        | _ ->
            let errors =
                [ match nameResult with
                  | Error e -> yield! e
                  | _ -> ()

                  match descriptionResult with
                  | Error e -> yield! e
                  | _ -> ()

                  match priceResult with
                  | Error e -> yield! e
                  | _ -> ()

                  match stockQuantityResult with
                  | Error e -> yield! e
                  | _ -> ()

                  match categoryIdResult with
                  | Error e -> yield! e
                  | _ -> () ]

            Error errors

    /// Handler to process the request after validation
    let private createProductHandler (connection: IDbConnection) (request: CreateProductRequest) : Task<IResult> =
        task {
            try
                // Here you would normally insert the product into the database
                // For now, we'll simulate a created product
                let product =
                    { Id = 1 // This would normally be generated by the database
                      Name = request.Name
                      Description = request.Description
                      Price = request.Price
                      StockQuantity = request.StockQuantity
                      CategoryId = request.CategoryId
                      CreatedAt = DateTime.UtcNow
                      UpdatedAt = None }

                // Create the response
                let response =
                    { Id = product.Id
                      Name = product.Name
                      Description = product.Description
                      Price = product.Price
                      StockQuantity = product.StockQuantity
                      CategoryId = product.CategoryId
                      CreatedAt = product.CreatedAt
                      UpdatedAt = product.UpdatedAt }

                return ResultUtils.created $"/products/{product.Id}" response
            with ex ->
                return ResultUtils.serverError "Failed to create product"
        }

    /// Public function to create a product
    [<Authorize(Roles = "Admin")>]
    let createProduct (connection: IDbConnection) (request: CreateProductRequest) : Task<IResult> =
        ValidationUtils.validateRequest validateCreateProductRequest request (createProductHandler connection)
